# @title Default title text
import torch
from torch_geometric.data import Data
import random
import matplotlib.pyplot as plt
import networkx as nx
from torch_geometric.utils import to_networkx

# Define architectural and furniture elements with pastel colors
ELEMENTS = {
    'wall': {'size': [0.1, 0.1], 'color': '#A6A6A6'},  # Light Gray
    'door': {'size': [1.0, 0.2], 'color': '#FFD700'},  # Gold
    'window': {'size': [1.5, 0.2], 'color': '#87CEEB'},  # Sky Blue
    'table': {'size': [1.5, 1.0], 'color': '#FFB6C1'},  # Light Pink
    'chair': {'size': [0.5, 0.5], 'color': '#98FB98'}   # Pale Green
}

# Function to check if objects overlap
def is_overlapping(new_obj, existing_objs, min_spacing=0.5):
    for obj in existing_objs:
        if all(k in obj and k in new_obj for k in ['width', 'height']):
            if not (
                new_obj['x'] + new_obj['width'] + min_spacing < obj['x'] or
                new_obj['x'] > obj['x'] + obj['width'] + min_spacing or
                new_obj['y'] + new_obj['height'] + min_spacing < obj['y'] or
                new_obj['y'] > obj['y'] + obj['height'] + min_spacing
            ):
                return True
    return False

# Function to generate office layout
def generate_office_layout(room_width=12.0, room_height=10.0, num_pairs=5, arrangement="grid"):
    objects, edges = [], []
    
    # Define walls
    corners = [
        {'name': 'wall', 'x': 0.0, 'y': 0.0},
        {'name': 'wall', 'x': room_width, 'y': 0.0},
        {'name': 'wall', 'x': room_width, 'y': room_height},
        {'name': 'wall', 'x': 0.0, 'y': room_height}
    ]
    objects.extend(corners)

    # Connect walls
    for i in range(len(corners)):
        edges.append((i, (i + 1) % len(corners)))

    # Add doors and windows
    door_window_positions = []
    placed_door, window_count = False, 0
    for wall_start, wall_end in zip(corners, corners[1:] + [corners[0]]):
        if not placed_door:
            x, y = random.uniform(wall_start['x'] + 0.5, wall_end['x'] - 0.5), wall_start['y']
            door = {'name': 'door', 'x': x, 'y': y, 'width': ELEMENTS['door']['size'][0], 'height': ELEMENTS['door']['size'][1]}
            door_window_positions.append(door)
            placed_door = True

        while window_count < 3:
            x, y = random.uniform(wall_start['x'] + 0.5, wall_end['x'] - 0.5), wall_start['y']
            window = {'name': 'window', 'x': x, 'y': y, 'width': ELEMENTS['window']['size'][0], 'height': ELEMENTS['window']['size'][1]}
            if not is_overlapping(window, door_window_positions):
                door_window_positions.append(window)
                window_count += 1

    objects.extend(door_window_positions)

    # Function to place table-chair pairs based on arrangement
    def place_table_chair_pairs(num_pairs):
        furniture_list = []
        for i in range(num_pairs):
            if arrangement == "line":
                table_x, table_y = 2.0 + i * 3.0, room_height / 2
            elif arrangement == "grid":
                table_x, table_y = 2.0 + (i % 3) * 3.0, 2.0 + (i // 3) * 3.0
            elif arrangement == "circular":
                angle = 2 * 3.14159 * i / num_pairs
                radius = min(room_width, room_height) / 3
                table_x, table_y = room_width / 2 + radius * torch.cos(torch.tensor(angle)).item(), room_height / 2 + radius * torch.sin(torch.tensor(angle)).item()
            else:
                raise ValueError("Invalid arrangement type. Choose 'line', 'grid', or 'circular'.")

            # Place table
            table = {'name': 'table', 'x': table_x, 'y': table_y, 'width': ELEMENTS['table']['size'][0], 'height': ELEMENTS['table']['size'][1]}
            if not is_overlapping(table, objects + furniture_list):
                furniture_list.append(table)

                # Place three chairs around the table
                chair_positions = [
                    {'name': 'chair', 'x': table_x - 1.0, 'y': table_y, 'width': ELEMENTS['chair']['size'][0], 'height': ELEMENTS['chair']['size'][1]},
                    {'name': 'chair', 'x': table_x + 1.0, 'y': table_y, 'width': ELEMENTS['chair']['size'][0], 'height': ELEMENTS['chair']['size'][1]},
                    {'name': 'chair', 'x': table_x, 'y': table_y - 1.0, 'width': ELEMENTS['chair']['size'][0], 'height': ELEMENTS['chair']['size'][1]}
                ]

                for chair in chair_positions:
                    if not is_overlapping(chair, objects + furniture_list):
                        furniture_list.append(chair)
                        edges.append((len(objects) + len(furniture_list) - 1, len(objects) + len(furniture_list) - 2))

        return furniture_list

    # Place tables and chairs
    furniture = place_table_chair_pairs(num_pairs)
    objects.extend(furniture)

    # Create node features
    node_features = [[list(ELEMENTS.keys()).index(obj['name']), obj['x'], obj['y']] for obj in objects]
    edge_index = torch.tensor(edges, dtype=torch.long).t().contiguous()
    node_features = torch.tensor(node_features, dtype=torch.float)
    return Data(x=node_features, edge_index=edge_index), objects

# Visualization function
def visualize_office(data, objects, room_width=12.0, room_height=10.0, padding=1.0):
    G = to_networkx(data, to_undirected=True)
    positions = {i: (data.x[i, 1].item(), data.x[i, 2].item()) for i in range(data.num_nodes)}
    labels = {i: obj['name'] for i, obj in enumerate(objects)}

    # Assign pastel colors
    node_colors = [ELEMENTS[labels[node]]['color'] if labels[node] in ELEMENTS else 'gray' for node in G.nodes()]
    node_sizes = [300 if labels[node] == 'wall' else 700 for node in G.nodes()]

    plt.figure(figsize=(12, 10))
    plt.title("Office Layout Visualization", fontsize=14)
    plt.xlim(-padding, room_width + padding)
    plt.ylim(-padding, room_height + padding)

    # Draw graph with node names
    nx.draw(G, pos=positions, with_labels=True, labels=labels, node_size=node_sizes, node_color=node_colors, edge_color="gray", font_size=8)

    plt.gca().set_aspect('equal', adjustable='box')
    plt.show()

# Ask user for furniture arrangement
user_arrangement = input("Choose furniture arrangement (line, grid, circular): ").strip().lower()

# Generate and visualize the office layout
office_graph, object_list = generate_office_layout(arrangement=user_arrangement)
visualize_office(office_graph, object_list)
